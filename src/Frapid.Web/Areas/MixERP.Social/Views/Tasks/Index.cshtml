@model dynamic

@{
    ViewBag.Title = "Attendance";
    Layout = ViewBag.Layout;
}

<style>
    #dashboard-container {
        padding: 0 !important;
    }

    .social.network {
        background: #fafafa;
    }

        .social.network .actions {
            padding: 1em;
            text-align: right;
        }

    .filters a.filter {
        display: block !important;
        color: #555;
        padding: 0.25em 0;
        font-size: 0.9em;
        cursor: pointer;
        color: #aaa;
        font-weight: 600;
    }

        .filters a.filter.sected,
        .filters a.filter:hover {
            color: #ddd;
        }


    .action.column {
        background: #222;
        color: #ddd;
    }


    .add.a.new.post {
        border: 1px solid #ccc;
        background: #fff;
    }

        .add.a.new.post > .post {
        }

            .add.a.new.post > .post textarea {
                width: 100%;
                border: none;
                border-bottom: 1px solid #ddd;
                padding: 1em;
            }

        .add.a.new.post > .buttons {
            padding: 1em;
        }

            .add.a.new.post > .buttons .left {
                display: inline-block;
                width: 50%;
            }

            .add.a.new.post > .buttons .right {
                display: inline-block;
                width: 50%;
                text-align: right;
            }

    .stories > .story {
        background: #fff;
        border: 1px solid #ccc;
        margin: 1em 0;
    }

        .stories > .story:first-of-type {
            margin-top: 0;
        }

        .stories > .story .text {
            padding: 1em;
        }

    .social.network a {
        cursor: pointer;
    }

    .stories > .story .actions, .liked.by {
        border-top: 1px solid #eee;
        border-bottom: 1px solid #eee;
        text-align: left !important;
        padding: 0.25em 1em !important;
    }

    .liked.by {
        background: #fafafa;
        padding: 0.8em 1em !important;
        color: #777;
        display: block;
    }

    .stories > .story a {
        color: #444;
        font-weight: 500;
    }

        .stories > .story a i {
            color: #999;
        }

    .story textarea {
        width: 100%;
        border: none;
        padding: 1em;
    }

    .stories > .story a:hover {
        color: #000;
    }

    .stories > .story .actions a {
        text-align: left !important;
        padding: 0 1em 1em 0 !important;
        color: #666;
    }

    .story .buttons {
        border-top: 1px solid #eee;
        display: flex;
        padding: 1em;
    }

        .story .buttons .left {
            display: inline-block;
            width: 50%;
        }

        .story .buttons .right {
            display: inline-block;
            width: 50%;
            text-align: right;
        }

    .social.network .heading {
        padding: 1em 0;
        font-size: 2em;
        color: #222;
        font-weight: 300;
    }

    section.social.network {
        display: flex;
    }


        section.social.network .activities {
            padding: 0 1em 4em 1em;
            width: 100%;
        }

    .story .avatar {
        display: flex;
        padding: 1em 0 0 1em;
    }


        .story .avatar .photo img {
            height: 3em;
            width: auto;
        }

        .story .avatar .info {
            padding: 0 0.5em;
        }

    .reply {
        display: flex;
        background: #fcfcfc;
        border-bottom: 1px solid #eee;
    }

        .reply > .avatar {
            display: inine-flex;
        }

        .reply > .story {
            display: inine-flex;
            padding: 1em;
        }

            .reply > .story .meta {
                display: flex;
            }


    .refreshing.moment {
        color: #999;
        text-transform: uppercase;
        font-size: 0.8em;
        cursor: pointer;
    }

    .reply > .story .meta .refreshing.moment {
        padding: 0.25em 0.75em;
        color: #999;
    }

    .story .buttons .ui.basic.buttons {
        width: 80px;
    }

    .story {
        position: relative;
        width: 100%;
    }

        .story .remove.feed {
            position: absolute;
            right: 2px;
            top: 2px;
            color: #eee;
            cursor: pointer;
        }

            .story .remove.feed:hover {
                color: #aaa;
            }

    .show.previous {
        padding: 1em;
        background: #fafafa;
        text-align: center;
        display: block;
        border-bottom: 1px solid #eee;
    }

    .ui.gallery {
        width: 100%;
    }

        .ui.gallery .item {
            display: inline-flex;
            width: 10em;
            height: 10em;
            margin: 2px;
            position: relative;
            border: 1px solid transparent;
            cursor: pointer;
	        overflow: hidden;
        }


            .ui.gallery .item:hover {
                border-color: #aaa;
            }

        .ui.gallery > .item .delete.icon {
            position: absolute;
            top: 1px;
            right: 1px;
            color: #eee;
            font-size: 0.78em;
            text-shadow: 0 0 2px #000;
            cursor: pointer;
        }

        .ui.gallery > .item .file.name {
            position: absolute;
            bottom: 1em;
            left: 1em;
            color: #fff;
            text-shadow: 0 0 2px #000;
            text-transform: uppercase;
            font-size: 0.8em;
            font-weight: bold;
            text-align: left;
            width: 80%;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            -o-text-overflow: ellipsis;
        }

        .ui.gallery .pdf.placeholder.item {
            background: #AECA1C;
        }

        .ui.gallery .doc.placeholder.item,
        .ui.gallery .docx.placeholder.item {
            background: #FB7E26;
        }

        .ui.gallery .xls.placeholder.item,
        .ui.gallery .xlsx.placeholder.item {
            background: #83997B;
        }

        .ui.gallery .ppt.placeholder.item,
        .ui.gallery .pptx.placeholder.item {
            background: #E300C1;
        }

        .ui.gallery .placeholder.item .text {
            font-size: 2.4em;
            width: 100%;
            text-align: center;
            position: absolute;
            top: 25%;
            color: #fff;
            font-weight: 300;
            text-transform: uppercase;
        }
</style>


<section class="ui social network text container">
    <div class="activities">
        <div class="heading">Add a New Post</div>
        <div class="add a new post">
            <div class="post">
                <textarea id="WhatsOnYourMindTextArea" placeholder="What's on your mind?" rows="4"></textarea>
            </div>
            <div class="ui gallery">
            </div>
            <div class="buttons">
                <div class="left">
                    <input id="UploadInputFile" type="file" multiple="multiple" accept=".jpg,.jpeg,.png,.gif,.xls,.xlsx,.doc,.docx,.ppt,.pptx,.pdf" style="display: none;">
                    <button onclick="$('#UploadInputFile').trigger('click');" class="ui basic icon button" title="Attach"><i class='photo icon'></i></button>
                </div>
                <div class="right">
                    <button id="PostButton" class="ui basic blue button">Post</button>
                </div>
            </div>
        </div>

        <div class="tpad8">
            <div class="ui basic button">Upload My Profile Picture</div>
        </div>
        <div class="heading">All Stories</div>
        <div class="all stories">
        </div>
        <a class="ui load older stories basic fluid button" onclick="loadOlderStories(this)">Load Older Stories</a>
    </div>
</section>

<div id="LightBoxModal" class="ui small modal">
    <img style="width: 100%;" />
</div>

<script src="/Areas/MixERP.Social/Scripts/social.js"></script>
<script>
    var imageTemplate = `<div class="image item" data-is-local="true" data-file-name="{FileName}">
		<i onclick="deleteItem(this)" class="delete icon"></i>
		<img onclick="preview(this);" src="{ImageSource}" />
		<div class="file name">{FileName}</div>
	</div>`;

    var filePlaceholderTemplate = `<div data-is-local="true" data-contents="{Base64}" class="{Extension} placeholder item" data-file-name="{FileName}">
		<i onclick="deleteItem(this)" class ="delete icon"></i>
		<div class="text">{Extension}</div>
		<div class="file name">{FileName}</div>
	</div>`;

    var template = `
        <div class ="story" data-feed-id="{FeedId}" data-event-time="{EventTimestamp}"
            data-parent-feed-id="{ParentFeedId}" data-scope="{Scope}" data-child-count="{ChildCount}">
            <div class ="avatar">
                <div class ="photo">
                    <img src="/dashboard/social/avatar/{CreatedBy}/{CreatedByName}/100/100" />
                </div>
                <div class ="info">
                    <a class ="name">{CreatedByName}</a>
                    <div class ="refreshing moment" data-time="{EventTimestamp}" title="{EventTimestamp}">{EventTimestamp}</div>
                </div>
            </div>
            <div class ="text">
                {FormattedText}
                <a data-feed-id="{FeedId}" onclick='deleteFeed(this);' class="remove feed">
                    <i class ="delete icon"></i>
                </a>
                <div class ="ui gallery">
                </div>
            </div>
            <div class ="actions">
                <a onclick="like(this);" data-feed-id="{FeedId}" class="like"><i class ='thumbs up icon'></i>Like</a>
                <a onclick="comment(this)" class ="comment"><i class='comment icon'></i>Comment</a>
            </div>
            <a class ="liked by">
                <i class='thumbs up icon'></i><span>0<span>
            </a>
            <div class ="stories">
            </div>
            <div class ="post">
                <textarea placeholder="Leave a comment" rows="2"></textarea>
            </div>
            <div class ="buttons">
                <div class ="left">
                    <button data-feed-id="{FeedId}" class ="ui basic icon button" title="Attach"><i class ='photo icon'></i></button>
                </div>
                <div class ="right">
                    <button data-feed-id="{FeedId}" onclick="postStory(this)" class ="ui basic blue button">Post</button>
                </div>
            </div>
        </div>`;

    var replyTemplate = `
        <div class ="reply" data-feed-id="{FeedId}" data-event-time="{EventTimestamp}"
            data-parent-feed-id="{ParentFeedId}" data-scope="{Scope}">
            <div class ="avatar">
                <div class ="photo">
                    <img src="/dashboard/social/avatar/{CreatedBy}/{CreatedByName}/100/100" />
                </div>
            </div>
            <div class ="story">
                <div class ="info">
                    <a class ="name">{CreatedByName}:</a>
                    <span>{FormattedText}</span>
                    <div class='meta'>
                        <a><i class ='thumbs up icon'></i><span>0</span></a>
                        <a class ="refreshing moment" data-time="{EventTimestamp}" title="{EventTimestamp}">{EventTimestamp}</a>
                    </div>
                </div>
                <a data-feed-id="{FeedId}" onclick='deleteFeed(this);' class ="remove feed">
                    <i class ="delete icon"></i>
                </a>
            </div>
        </div>`;
</script>
<script>
    function displayImage(target, file, fileName) {
        const reader = new FileReader();

        reader.onload = function (e) {
            const base64 = e.target.result;
            var el = imageTemplate;

            el = el.replace(/{ImageSource}/g, base64);
            el = el.replace(/{FileName}/g, fileName);
            target.append(el);
        };

        reader.readAsDataURL(file);
    };

    function displayFile(target, file, fileName, extension) {
        const reader = new FileReader();

        reader.onload = function (e) {
            const base64 = e.target.result;
            var el = filePlaceholderTemplate;

            el = el.replace(/{Base64}/g, base64);
            el = el.replace(/{Extension}/g, extension);
            el = el.replace(/{FileName}/g, fileName);
            target.append(el);
        };

        reader.readAsDataURL(file);
    };

    function uploadAttachments(el) {
        const handler = "/dashboard/social/attachment";

        el.upload(handler, function (response) {
            el.attr("data-uploaded-files", JSON.stringify(response));
        }, function (progress, value) {
        }, function (e) {
            window.displayMessage(JSON.stringify(e));
        });
    };

    function isImage(fileName) {
        const images = ["jpg", "jpeg", "png", "gif"];
        const extension = fileName.split('.').pop().toLowerCase();

        if (images.indexOf(extension) >= 0) {
            return true;
        };

        return false;
    };

    $("#UploadInputFile").on("change", function () {
        const el = $(this);
        const target = $(".add.a.new.post .ui.gallery").html("");

        const files = this.files;

        for (var i = 0; i < files.length; i++) {
            const file = files[i];
            const fileName = file.name;
            const extension = fileName.split('.').pop().toLowerCase();

            if (isImage(fileName)) {
                displayImage(target, file, fileName);
            } else {
                displayFile(target, file, fileName, extension);
            };
        };

        uploadAttachments(el);
    });
</script>
<script>

    const attachmentTemplate = ``; //Todo

    const showPrevisouAnchorTemplate = `<a class="show previous comments" onclick="showPreivousComments(this);">
                                          Show Previous Comments
                                        </a>`;

    function displayAttachment(el, attachment) {
        var template;
        const extension = attachment.split('.').pop().toLowerCase();

        if (isImage(attachment)) {
            template = imageTemplate;
            template = template.replace(/{ImageSource}/g, "/dashboard/social/attachment/" + attachment);
            template = template.replace(/{FileName}/g, "");
        } else {
            template = filePlaceholderTemplate;
            template = template.replace(/{Base64}/g, "");
            template = template.replace(/{Extension}/g, extension);
            template = template.replace(/{FileName}/g, attachment);
        };

        el.append(template);
    };

    function displayAttachments(el, attachments) {
        attachments = attachments.split(",");

        for (let i = 0; i < attachments.length; i++) {
            const attachment = attachments[i];
            displayAttachment(el, attachment);
        };
    };

    function getCard(model) {
        var el = template;

        if (model.ParentFeedId) {
            el = replyTemplate;
        };

        el = el.replace(/{FeedId}/g, model.FeedId);
        el = el.replace(/{EventTimestamp}/g, model.EventTimestamp);
        el = el.replace(/{CreatedBy}/g, model.CreatedBy);
        el = el.replace(/{CreatedByName}/g, model.CreatedByName);
        el = el.replace(/{ParentFeedId}/g, model.ParentFeedId);
        el = el.replace(/{Scope}/g, model.Scope);
        el = el.replace(/{FormattedText}/g, model.FormattedText);
        el = el.replace(/{ChildCount}/g, model.ChildCount);

        el = $(el);
        if (model.Attachments) {
            displayAttachments(el.find(".ui.gallery"), model.Attachments);
        };

        return el;
    };

    function createCard(model, prepend) {
        const el = getCard(model);

        var target;

        if (model.ParentFeedId) {
            target = $(".story[data-feed-id='" + model.ParentFeedId + "'] .stories");
        } else {
            target = $(".all.stories");
        }

        if (prepend) {
            target.prepend(el);
        } else {
            target.append(el);
        }

        if (model.ChildCount > 10) {
            el.find(".post").before(showPrevisouAnchorTemplate);
        };
    };

    function createUI(lastFeedId, parentFeedId, model) {
        $.each(model, function () {
            createCard(this);
        });
    };

    function displayStories(lastFeedId, parentFeedId) {
        function request() {
            var url = "/dashboard/social/feeds/{lastFeedId}/{parentFeedId}";
            url = url.replace("{lastFeedId}", lastFeedId);
            url = url.replace("{parentFeedId}", parentFeedId);

            return window.getAjaxRequest(url);
        };

        lastFeedId = lastFeedId || 0;
        parentFeedId = parentFeedId || 0;

        const ajax = request();
        ajax.success(function (response) {
            const model = window.Enumerable.From(response).OrderBy(function (x) {
                return x.ParentFeedId || 0;
            }).ThenBy(function (x) {
                return x.RowNumber;
            }).ToArray();

            createUI(lastFeedId, parentFeedId, model);
            window.setMoments();

            $(document).trigger("storiesdisplayed", [model]);
        });
    };

    displayStories();
</script>
<script>
    $("#PostButton").off("click").on("click", function () {
        function request(model) {
            const url = "/dashboard/social";
            const data = JSON.stringify(model);

            return window.getAjaxRequest(url, "POST", data);
        };

        function getModel() {
            function getAttachments() {
                const attachments = [];

                const files = JSON.parse($("#UploadInputFile").attr("data-uploaded-files"));

                $.each(files, function () {
                    attachments.push(this.FileName);
                });

                return attachments.join(",");
            };

            function getScope() {
                return ""; //Todo
            };

            const text = $("#WhatsOnYourMindTextArea").val().trim();

            return {
                FormattedText: text,
                Attachments: getAttachments(),
                Scope: getScope(),
                IsPublic: true
            };
        };


        const model = getModel();

        if (!model.FormattedText) {
            return;
        };


        const ajax = request(model);
        var el = $(this);
        el.addClass("loading");

        ajax.success(function (response) {
            $("#WhatsOnYourMindTextArea").val("");
            $("#UploadInputFile").attr("data-uploaded-files", "");

            window.displayMessage("Awesome!", "success");
            el.removeClass("loading");
            createCard(response, true);
            window.setMoments();
        });

        ajax.fail(function () {
            window.displayMessage("Something went wrong. :(");
            el.removeClass("loading");
        });
    });

    function postStory(element) {
        function request(model) {
            const url = "/dashboard/social";
            const data = JSON.stringify(model);

            return window.getAjaxRequest(url, "POST", data);
        };

        function getModel(el) {
            function getAttachments() {
                return ""; //Todo
            };

            function getScope() {
                return ""; //Todo
            };

            function getParentFeedId(el) {
                return el.attr("data-feed-id") || null;
            };

            const text = el.parent().parent().parent().find(".post textarea").val().trim();

            return {
                FormattedText: text,
                Attachments: getAttachments(),
                Scope: getScope(),
                IsPublic: true,
                ParentFeedId: getParentFeedId(el)
            };
        };

        const el = $(element);
        el.addClass("loading");
        const model = getModel(el);

        if (!model.FormattedText) {
            return;
        };

        const ajax = request(model);

        ajax.success(function (response) {
            el.parent().parent().parent().find(".post textarea").val("");
            el.removeClass("loading");
            createCard(response, true);
            window.setMoments();
        });

        ajax.fail(function () {
            window.displayMessage("Something went wrong. :(");
            el.removeClass("loading");
        });
    };

    function deleteFeed(element) {
        function request(feedId) {
            var url = "/dashboard/social/delete/{feedId}";
            url = url.replace("{feedId}", feedId);

            return window.getAjaxRequest(url, "DELETE");
        };

        const el = $(element);
        const feedId = window.parseInt(el.attr("data-feed-id"));

        if (!feedId) {
            return;
        }

        const confirmed = window.confirmAction();
        if (!confirmed) {
            return;
        };


        const ajax = request(feedId);

        ajax.success(function () {
            var target = el.closest(".reply");

            if (!target.length) {
                target = el.closest(".story");
            }

            target.remove();
        });

        ajax.fail(function (xhr) {
            window.logAjaxErrorMessage(xhr);
        });
    };

    function comment(element) {
        const el = $(element);
        const textArea = el.closest(".story").find("textarea");
        textArea.focus();
    };

    function showPreivousComments(element) {
        const el = $(element);
        const story = el.closest(".story");
        const parentFeedId = story.attr("data-feed-id");
        const childCount = story.attr("data-child-count");

        const feedIds = story.find(".reply").map(function () {
            return $(this).attr("data-feed-id");
        }).get();

        const lastFeedId = Math.min.apply(null, feedIds);

        displayStories(lastFeedId, parentFeedId);

        $(document).off("storiesdisplayed").on("storiesdisplayed", function () {
            const totalItems = story.find(".reply").length;

            if (totalItems >= childCount) {
                el.remove();
            };
        });
    };

    function loadOlderStories(el) {
        const feedIds = $(".all.stories>.story").map(function () {
            return $(this).attr("data-feed-id");
        }).get();

        const lastFeedId = Math.min.apply(null, feedIds);

        displayStories(lastFeedId);

        $(document).off("storiesdisplayed").on("storiesdisplayed", function (e, model) {
            if (!model.length) {
                $(el).remove();
                window.displayMessage("No more stories to display", "info");
            };
        });
    };

    var scolledToButton = false;

    $(window).scroll(function () {
        if (window.scolledToButton) {
            return;
        };

        const docViewTop = $(window).scrollTop();
        const docViewBottom = docViewTop + $(window).height();

        const el = $(".load.older.stories.button");
        const elemTop = el.offset().top;
        const elemBottom = elemTop + el.height();

        const isVisible = ((elemBottom <= docViewBottom) && (elemTop >= docViewTop));

        if (isVisible) {
            el.trigger("click");
            window.scolledToButton = true;

            setTimeout(function () {
                window.scolledToButton = false;
            }, 2000);
        };
    });

    function deleteItem(el) {
        const confirmed = window.confirmAction();

        if (!confirmed) {
            return;
        };

        el = $(el);
        const target = el.closest(".item");
        target.remove();
    };

    function preview(el) {
        const image = $(el);
        const target = $("#LightBoxModal img");
        target.attr("src", image.attr("src"));
        const height = image.get(0).naturalHeight;
        const width = image.get(0).naturalWidth;
        const windowWidth = $(window).width();
        var left = (windowWidth - width) / 2;
        const offset = 400;

        if (left < 0) {
            left = 0;
        };

        left += offset;

        $("#LightBoxModal").css("height", height + "px");
        $("#LightBoxModal").css("width", width + "px");
        $("#LightBoxModal").css("left", left + "px");

        $("#LightBoxModal").modal("show");
    };
</script>
